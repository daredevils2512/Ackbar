// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "Robot.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
Drivetrain* Robot::drivetrain = 0;
Trunnion* Robot::trunnion = 0;
Shooter* Robot::shooter = 0;
Claw* Robot::claw = 0;
Vision* Robot::vision = 0;
Lights* Robot::lights = 0;
OI* Robot::oi = 0;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INITIALIZATION
void Robot::RobotInit() {
	RobotMap::init();
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	drivetrain = new Drivetrain();
	trunnion = new Trunnion();
	shooter = new Shooter();
	claw = new Claw();
	vision = new Vision();
	lights = new Lights();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	// This MUST be here. If the OI creates Commands (which it very likely
	// will), constructing it during the construction of CommandBase (from
	// which commands extend), subsystems are not guaranteed to be
	// yet. Thus, their requires() statements may grab null pointers. Bad
	// news. Don't move it.
	oi = new OI();
	lw = LiveWindow::GetInstance();
	// instantiate the command used for the autonomous period
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	autonomousCommand = new AutonomousCommand();
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=AUTONOMOUS
	autonomousCommand = (Command*)oi->chooser->GetSelected();
  }
	
void Robot::AutonomousInit() {
	if (autonomousCommand != NULL)
		autonomousCommand->Start();
}
	
void Robot::AutonomousPeriodic() {
	Scheduler::GetInstance()->Run();
}
	
void Robot::TeleopInit() {
	// This makes sure that the autonomous stops running when
	// teleop starts running. If you want the autonomous to 
	// continue until interrupted by another command, remove
	// this line or comment it out.
	autonomousCommand->Cancel();
}
	
void Robot::TeleopPeriodic() {
	if (autonomousCommand != NULL) {
		Scheduler::GetInstance()->Run();
	}
	SmartDashboard::PutNumber("ArmAngle", Robot::trunnion->GetAngle());
	SmartDashboard::PutNumber("Raw Voltage", Robot::trunnion->armAngle->GetVoltage());
	SmartDashboard::PutBoolean("ArmWheel", Robot::claw->GetWheel());
	SmartDashboard::PutNumber("X Axis", -1 * Robot::oi->getStick1()->GetRawAxis(2));
	SmartDashboard::PutNumber("Y Axis", Robot::oi->getStick1()->GetRawAxis(4));
	SmartDashboard::PutBoolean("Cocked", Robot::shooter->GetCocked());
	SmartDashboard::PutNumber("LeftDrive", Robot::drivetrain->left->Get());
	SmartDashboard::PutNumber("RightDrive", Robot::drivetrain->right->Get());
	SmartDashboard::PutBoolean("HOT", vision->Hot());
	
}
void Robot::TestPeriodic() {
	lw->Run();
}
START_ROBOT_CLASS(Robot);
