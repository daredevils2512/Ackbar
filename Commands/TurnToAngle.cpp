// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "TurnToAngle.h"
#include <cmath>
#include <sstream>
const float TurnToAngle::TOLERANCE = 3;
const float TurnToAngle::RATE = 0.4;
TurnToAngle::TurnToAngle(float ang) {
	// Use requires() here to declare subsystem dependencies
	// eg. requires(chassis);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::drivetrain);
	// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	relativeAngle = ang;

	if (relativeAngle < 0) {
		direction = RIGHT;
	} else {
		direction = LEFT;
	}

	ostringstream message;
	message << "TurnToAngle( " << ang << " )  Turning: " << direction;
	Robot::Log(message.str());
	message.str() = "";
}
// Called just before this Command runs the first time
void TurnToAngle::Initialize() {
	absoluteAngle = relativeAngle + Robot::drivetrain->GetDirection();

	ostringstream message;
	message << "TurnToAngle Initialize() Absolute Angle = " << absoluteAngle
			<< " Relative Angle = " << relativeAngle;
	Robot::Log(message.str());
}
// Called repeatedly when this Command is scheduled to run
void TurnToAngle::Execute() {
	Robot::drivetrain->Turning(RATE * direction);
}
// Make this return true when this Command no longer needs to run execute()
bool TurnToAngle::IsFinished() {
	float gyroVal = Robot::drivetrain->GetDirection();
	float difference = gyroVal - relativeAngle;

	ostringstream message;
	message << "TurnToAngle IsFinished(): " << difference << " GetDirection: "
			<< gyroVal << " Direction = " << direction;
	Robot::Log(message.str());
	message.str() = "";

	if (direction == LEFT) {
		difference *= -1;
	}

	if (difference < TOLERANCE) {
		message << "TurnToAngle IsFinished() difference < tolerance FINISHED";
		Robot::Log(message.str());
		message.str() = "";
		return true;
	} else {
		return false;
	}
}
// Called once after isFinished returns true
void TurnToAngle::End() {
	Robot::drivetrain->Stop();
}
// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void TurnToAngle::Interrupted() {
}
