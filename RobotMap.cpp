// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "RobotMap.h"
#include "LiveWindow/LiveWindow.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
Solenoid* RobotMap::drivetrainGear = NULL;
SpeedController* RobotMap::drivetrainLeft = NULL;
SpeedController* RobotMap::drivetrainRight = NULL;
RobotDrive* RobotMap::drivetrainchassis = NULL;
Gyro* RobotMap::drivetrainGyro = NULL;
Encoder* RobotMap::drivetrainLeftEncoder = NULL;
Encoder* RobotMap::drivetrainRightEncoder = NULL;
SpeedController* RobotMap::trunnionArmMotor1 = NULL;
SpeedController* RobotMap::trunnionArmMotor2 = NULL;
AnalogChannel* RobotMap::trunnionArmAngle = NULL;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=ALLOCATION
void RobotMap::init() {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
	LiveWindow* lw = LiveWindow::GetInstance();
	drivetrainGear = new Solenoid(1, 1);
	lw->AddActuator("Drivetrain", "Gear", drivetrainGear);
	
	drivetrainLeft = new Talon(1, 1);
	lw->AddActuator("Drivetrain", "Left", (Talon*) drivetrainLeft);
	
	drivetrainRight = new Talon(1, 2);
	lw->AddActuator("Drivetrain", "Right", (Talon*) drivetrainRight);
	
	drivetrainchassis = new RobotDrive(drivetrainLeft, drivetrainRight);
	
	drivetrainchassis->SetSafetyEnabled(true);
        drivetrainchassis->SetExpiration(0.1);
        drivetrainchassis->SetSensitivity(0.5);
        drivetrainchassis->SetMaxOutput(1.0);
        
	drivetrainGyro = new Gyro(1, 1);
	lw->AddSensor("Drivetrain", "Gyro", drivetrainGyro);
	drivetrainGyro->SetSensitivity(0.007);
	drivetrainLeftEncoder = new Encoder(1, 1, 1, 2, false, Encoder::k4X);
	lw->AddSensor("Drivetrain", "LeftEncoder", drivetrainLeftEncoder);
	drivetrainLeftEncoder->SetDistancePerPulse(1.0);
        drivetrainLeftEncoder->SetPIDSourceParameter(Encoder::kRate);
        drivetrainLeftEncoder->Start();
	drivetrainRightEncoder = new Encoder(1, 3, 1, 4, false, Encoder::k4X);
	lw->AddSensor("Drivetrain", "RightEncoder", drivetrainRightEncoder);
	drivetrainRightEncoder->SetDistancePerPulse(1.0);
        drivetrainRightEncoder->SetPIDSourceParameter(Encoder::kRate);
        drivetrainRightEncoder->Start();
	trunnionArmMotor1 = new Talon(1, 3);
	lw->AddActuator("Trunnion", "ArmMotor1", (Talon*) trunnionArmMotor1);
	
	trunnionArmMotor2 = new Talon(1, 4);
	lw->AddActuator("Trunnion", "ArmMotor2", (Talon*) trunnionArmMotor2);
	
	trunnionArmAngle = new AnalogChannel(1, 2);
	lw->AddSensor("Trunnion", "ArmAngle", trunnionArmAngle);
	
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
}
