// RobotBuilder Version: 1.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in th future.
#include "Drivetrain.h"
#include "../Robotmap.h"
#include "../Commands/StickDrive.h"
#include <cmath>
Drivetrain::Drivetrain() : Subsystem("Drivetrain") {
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	gear = RobotMap::drivetrainGear;
	left = RobotMap::drivetrainLeft;
	right = RobotMap::drivetrainRight;
	chassis = RobotMap::drivetrainchassis;
	gyro = RobotMap::drivetrainGyro;
	leftEncoder = RobotMap::drivetrainLeftEncoder;
	rightEncoder = RobotMap::drivetrainRightEncoder;
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
}
    
void Drivetrain::InitDefaultCommand() {
	// Set the default command for a subsystem here.
	//SetDefaultCommand(new MySpecialCommand());
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
	SetDefaultCommand(new StickDrive());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}
void Drivetrain::DriveWithStick(float xAxis, float yAxis) {
	float deltaX = 0;
	float deltaY = 0;
	
	if(fabs(xAxis) < 0.1) {
		deltaX = 0;
	}
	else {
		deltaX = xAxis;
	}
	
	if(fabs(yAxis) < 0.1) {
		deltaY = 0;
	}
	else {
		deltaY = yAxis;
	}
	
	chassis->ArcadeDrive(deltaX, deltaY);
}
void Drivetrain::Shift(bool dir) {
	gear->Set(dir);
}
void Drivetrain::Stop() {
	chassis->StopMotor();
}
void Drivetrain::Turn(float rate) {
	left->Set(rate);
	right->Set(-1 * rate);
}
float Drivetrain::GetDirection() {
	return gyro->GetAngle();
}
void Drivetrain::Go(float rate) {
	chassis->Drive(rate, 0);
}
int Drivetrain::GetDistance() {
	return (leftEncoder->Get() + rightEncoder->Get()) / 2;
}
void Drivetrain::DistanceReset() {
	leftEncoder->Reset();
	rightEncoder->Reset();
}
// Put methods for controlling this subsystem
// here. Call these from Commands.
